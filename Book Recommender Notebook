{"metadata":{"kernelspec":{"language":"python","display_name":"Python 3","name":"python3"},"language_info":{"name":"python","version":"3.11.11","mimetype":"text/x-python","codemirror_mode":{"name":"ipython","version":3},"pygments_lexer":"ipython3","nbconvert_exporter":"python","file_extension":".py"},"kaggle":{"accelerator":"none","dataSources":[],"isInternetEnabled":true,"language":"python","sourceType":"notebook","isGpuEnabled":false}},"nbformat_minor":4,"nbformat":4,"cells":[{"cell_type":"code","source":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle/python Docker image: https://github.com/kaggle/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"../input/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('/kaggle/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (/kaggle/working/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to /kaggle/temp/, but they won't be saved outside of the current session","metadata":{"_uuid":"8f2839f25d086af736a60e9eeb907d3b93b6e0e5","_cell_guid":"b1076dfc-b9ad-4769-8c92-a6c4dae69d19","trusted":true,"execution":{"iopub.status.busy":"2025-05-18T16:29:46.427267Z","iopub.execute_input":"2025-05-18T16:29:46.428181Z","iopub.status.idle":"2025-05-18T16:29:46.765627Z","shell.execute_reply.started":"2025-05-18T16:29:46.428151Z","shell.execute_reply":"2025-05-18T16:29:46.764727Z"}},"outputs":[{"name":"stdout","text":"/kaggle/input/cmu-book-summary-dataset/booksummaries.txt\n","output_type":"stream"}],"execution_count":1},{"cell_type":"code","source":"# installations\n!pip install --quiet transformers torch peft huggingface_hub kaggle pinecone lark rank_bm25\n# removed these installations for now: langchain-community langchain-huggingface langchain_pinecone langchain-openai langchain-groq langchainhub","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-05-18T16:29:54.087677Z","iopub.execute_input":"2025-05-18T16:29:54.088134Z","iopub.status.idle":"2025-05-18T16:31:16.547572Z","shell.execute_reply.started":"2025-05-18T16:29:54.088107Z","shell.execute_reply":"2025-05-18T16:31:16.546403Z"}},"outputs":[{"name":"stdout","text":"\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m363.4/363.4 MB\u001b[0m \u001b[31m4.6 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m0:00:01\u001b[0m00:01\u001b[0m\n\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m664.8/664.8 MB\u001b[0m \u001b[31m2.5 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m0:00:01\u001b[0m00:01\u001b[0m\n\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m211.5/211.5 MB\u001b[0m \u001b[31m1.9 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m0:00:01\u001b[0m00:01\u001b[0m\n\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m56.3/56.3 MB\u001b[0m \u001b[31m30.4 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m:00:01\u001b[0m00:01\u001b[0m\n\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m127.9/127.9 MB\u001b[0m \u001b[31m12.9 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m:00:01\u001b[0m00:01\u001b[0m\n\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m207.5/207.5 MB\u001b[0m \u001b[31m7.9 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m0:00:01\u001b[0m00:01\u001b[0m\n\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m21.1/21.1 MB\u001b[0m \u001b[31m79.2 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m:00:01\u001b[0m00:01\u001b[0m\n\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m421.9/421.9 kB\u001b[0m \u001b[31m22.1 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m111.0/111.0 kB\u001b[0m \u001b[31m5.4 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n\u001b[?25h","output_type":"stream"}],"execution_count":2},{"cell_type":"code","source":"# THE REGS\nimport pandas as pd\nimport numpy as np\nimport kagglehub\nimport torch\nimport nltk\nimport string\nimport os\nimport time\nimport re\n\n# PINECONE\nfrom pinecone import Pinecone, Index\nfrom pinecone import ServerlessSpec\n\n# LANGCHAIN\n# import langchain\n# from langchain.llms import OpenAI\n# from langchain_community.document_loaders.csv_loader import CSVLoader\n# from langchain.text_splitter import CharacterTextSplitter\n# from langchain.chains.conversation.memory import ConversationBufferWindowMemory\n# from langchain.chains import RetrievalQA\n# from langchain_pinecone import PineconeVectorStore\n# from langchain_core.prompts import PromptTemplate\n\n# HUGGINGFACE\nfrom transformers import AutoTokenizer, AutoModel\n# from langchain_community.embeddings import HuggingFaceBgeEmbeddings\n\n# Kaggle environment\nfrom kaggle_secrets import UserSecretsClient\n#secret_value = UserSecretsClient().get_secret(secret_label)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-05-18T16:31:16.549566Z","iopub.execute_input":"2025-05-18T16:31:16.549927Z","iopub.status.idle":"2025-05-18T16:31:31.223788Z","shell.execute_reply.started":"2025-05-18T16:31:16.549889Z","shell.execute_reply":"2025-05-18T16:31:31.222924Z"}},"outputs":[],"execution_count":3},{"cell_type":"code","source":"# Download data set\n# Download latest version\n# path = kagglehub.dataset_download(\"ymaricar/cmu-book-summary-dataset\")\n# print(\"Path to dataset files:\", path)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-05-18T16:31:31.224727Z","iopub.execute_input":"2025-05-18T16:31:31.225220Z","iopub.status.idle":"2025-05-18T16:31:31.229642Z","shell.execute_reply.started":"2025-05-18T16:31:31.225197Z","shell.execute_reply":"2025-05-18T16:31:31.228732Z"}},"outputs":[],"execution_count":4},{"cell_type":"code","source":"def text_to_csv_pandas(input_file, output_file, column_names, delimiter=None):\n    \"\"\"\n    Reads a text file into a Pandas DataFrame and saves it as a CSV file.\n\n    Args:\n        input_file (str): The path to the input text file.\n        output_file (str): The path to the output CSV file.\n        delimiter (str, optional): The delimiter used in the text file. Defaults to None,\n            which will split each line by whitespace if the text file is not delimited.\n    \"\"\"\n    if delimiter is not None:\n        df = pd.read_csv(input_file, sep=delimiter, names = column_names, header=None)\n    else:\n         df = pd.read_csv(input_file, sep=r'\\s+', names = column_names, header=None)\n    df.to_csv(output_file, index=False, header=True)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-05-18T16:31:31.231617Z","iopub.execute_input":"2025-05-18T16:31:31.231856Z","iopub.status.idle":"2025-05-18T16:31:31.250005Z","shell.execute_reply.started":"2025-05-18T16:31:31.231837Z","shell.execute_reply":"2025-05-18T16:31:31.249147Z"}},"outputs":[],"execution_count":5},{"cell_type":"code","source":"columns = ['Wikipedia article ID', \n           'Freebase ID', \n           'Book title', \n           'Author', \n           'Publication date', \n           'Book genres', \n           'Plot summary']\n\ntext_to_csv_pandas('/kaggle/input/cmu-book-summary-dataset/booksummaries.txt', 'data.csv', \n                   column_names = columns, delimiter='\\t')","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-05-18T16:31:56.287180Z","iopub.execute_input":"2025-05-18T16:31:56.287845Z","iopub.status.idle":"2025-05-18T16:31:58.997597Z","shell.execute_reply.started":"2025-05-18T16:31:56.287812Z","shell.execute_reply":"2025-05-18T16:31:58.996679Z"}},"outputs":[],"execution_count":7},{"cell_type":"code","source":"data = pd.read_csv('/kaggle/working/data.csv')\ndata.head(n=3)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-05-18T16:31:58.998990Z","iopub.execute_input":"2025-05-18T16:31:58.999367Z","iopub.status.idle":"2025-05-18T16:31:59.587355Z","shell.execute_reply.started":"2025-05-18T16:31:58.999337Z","shell.execute_reply":"2025-05-18T16:31:59.586465Z"}},"outputs":[{"execution_count":8,"output_type":"execute_result","data":{"text/plain":"   Wikipedia article ID Freebase ID          Book title           Author  \\\n0                   620     /m/0hhy         Animal Farm    George Orwell   \n1                   843     /m/0k36  A Clockwork Orange  Anthony Burgess   \n2                   986     /m/0ldx          The Plague     Albert Camus   \n\n  Publication date                                        Book genres  \\\n0       1945-08-17  {\"/m/016lj8\": \"Roman \\u00e0 clef\", \"/m/06nbt\":...   \n1             1962  {\"/m/06n90\": \"Science Fiction\", \"/m/0l67h\": \"N...   \n2             1947  {\"/m/02m4t\": \"Existentialism\", \"/m/02xlf\": \"Fi...   \n\n                                        Plot summary  \n0   Old Major, the old boar on the Manor Farm, ca...  \n1   Alex, a teenager living in near-future Englan...  \n2   The text of The Plague is divided into five p...  ","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>Wikipedia article ID</th>\n      <th>Freebase ID</th>\n      <th>Book title</th>\n      <th>Author</th>\n      <th>Publication date</th>\n      <th>Book genres</th>\n      <th>Plot summary</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>620</td>\n      <td>/m/0hhy</td>\n      <td>Animal Farm</td>\n      <td>George Orwell</td>\n      <td>1945-08-17</td>\n      <td>{\"/m/016lj8\": \"Roman \\u00e0 clef\", \"/m/06nbt\":...</td>\n      <td>Old Major, the old boar on the Manor Farm, ca...</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>843</td>\n      <td>/m/0k36</td>\n      <td>A Clockwork Orange</td>\n      <td>Anthony Burgess</td>\n      <td>1962</td>\n      <td>{\"/m/06n90\": \"Science Fiction\", \"/m/0l67h\": \"N...</td>\n      <td>Alex, a teenager living in near-future Englan...</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>986</td>\n      <td>/m/0ldx</td>\n      <td>The Plague</td>\n      <td>Albert Camus</td>\n      <td>1947</td>\n      <td>{\"/m/02m4t\": \"Existentialism\", \"/m/02xlf\": \"Fi...</td>\n      <td>The text of The Plague is divided into five p...</td>\n    </tr>\n  </tbody>\n</table>\n</div>"},"metadata":{}}],"execution_count":8},{"cell_type":"code","source":"text = data['Book genres'].iloc[0]\nmatches = re.findall(r'(:\\s*[\"\\'])([^\"\\']+)(?=[\"\\'])', text)\nprint(matches)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-05-18T16:32:02.191195Z","iopub.execute_input":"2025-05-18T16:32:02.191833Z","iopub.status.idle":"2025-05-18T16:32:02.199206Z","shell.execute_reply.started":"2025-05-18T16:32:02.191769Z","shell.execute_reply":"2025-05-18T16:32:02.198085Z"}},"outputs":[{"name":"stdout","text":"[(': \"', 'Roman \\\\u00e0 clef'), (': \"', 'Satire'), (': \"', 'Children'), (': \"', 'Speculative fiction'), (': \"', 'Fiction')]\n","output_type":"stream"}],"execution_count":9}]}